// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$arrow-down-name: 'arrow-down';
$arrow-down-x: 50px;
$arrow-down-y: 32px;
$arrow-down-offset-x: -50px;
$arrow-down-offset-y: -32px;
$arrow-down-width: 10px;
$arrow-down-height: 6px;
$arrow-down-total-width: 66px;
$arrow-down-total-height: 40px;
$arrow-down-image: '../images/sprite.png';
$arrow-down: (50px, 32px, -50px, -32px, 10px, 6px, 66px, 40px, '../images/sprite.png', 'arrow-down', );
$arrow-right-name: 'arrow-right';
$arrow-right-x: 50px;
$arrow-right-y: 17px;
$arrow-right-offset-x: -50px;
$arrow-right-offset-y: -17px;
$arrow-right-width: 7px;
$arrow-right-height: 10px;
$arrow-right-total-width: 66px;
$arrow-right-total-height: 40px;
$arrow-right-image: '../images/sprite.png';
$arrow-right: (50px, 17px, -50px, -17px, 7px, 10px, 66px, 40px, '../images/sprite.png', 'arrow-right', );
$arrow-up-circle-name: 'arrow-up-circle';
$arrow-up-circle-x: 27px;
$arrow-up-circle-y: 0px;
$arrow-up-circle-offset-x: -27px;
$arrow-up-circle-offset-y: 0px;
$arrow-up-circle-width: 18px;
$arrow-up-circle-height: 18px;
$arrow-up-circle-total-width: 66px;
$arrow-up-circle-total-height: 40px;
$arrow-up-circle-image: '../images/sprite.png';
$arrow-up-circle: (27px, 0px, -27px, 0px, 18px, 18px, 66px, 40px, '../images/sprite.png', 'arrow-up-circle', );
$icon-agree-name: 'icon-agree';
$icon-agree-x: 50px;
$icon-agree-y: 0px;
$icon-agree-offset-x: -50px;
$icon-agree-offset-y: 0px;
$icon-agree-width: 16px;
$icon-agree-height: 12px;
$icon-agree-total-width: 66px;
$icon-agree-total-height: 40px;
$icon-agree-image: '../images/sprite.png';
$icon-agree: (50px, 0px, -50px, 0px, 16px, 12px, 66px, 40px, '../images/sprite.png', 'icon-agree', );
$icon-burger-name: 'icon-burger';
$icon-burger-x: 0px;
$icon-burger-y: 0px;
$icon-burger-offset-x: 0px;
$icon-burger-offset-y: 0px;
$icon-burger-width: 22px;
$icon-burger-height: 18px;
$icon-burger-total-width: 66px;
$icon-burger-total-height: 40px;
$icon-burger-image: '../images/sprite.png';
$icon-burger: (0px, 0px, 0px, 0px, 22px, 18px, 66px, 40px, '../images/sprite.png', 'icon-burger', );
$icon-close-name: 'icon-close';
$icon-close-x: 0px;
$icon-close-y: 23px;
$icon-close-offset-x: 0px;
$icon-close-offset-y: -23px;
$icon-close-width: 18px;
$icon-close-height: 17px;
$icon-close-total-width: 66px;
$icon-close-total-height: 40px;
$icon-close-image: '../images/sprite.png';
$icon-close: (0px, 23px, 0px, -23px, 18px, 17px, 66px, 40px, '../images/sprite.png', 'icon-close', );
$info-name: 'info';
$info-x: 23px;
$info-y: 23px;
$info-offset-x: -23px;
$info-offset-y: -23px;
$info-width: 16px;
$info-height: 16px;
$info-total-width: 66px;
$info-total-height: 40px;
$info-image: '../images/sprite.png';
$info: (23px, 23px, -23px, -23px, 16px, 16px, 66px, 40px, '../images/sprite.png', 'info', );
$spritesheet-width: 66px;
$spritesheet-height: 40px;
$spritesheet-image: '../images/sprite.png';
$spritesheet-sprites: ($arrow-down, $arrow-right, $arrow-up-circle, $icon-agree, $icon-burger, $icon-close, $info, );
$spritesheet: (66px, 40px, '../images/sprite.png', $spritesheet-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
